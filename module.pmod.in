#pike __REAL_VERSION__

constant __author = "Bill Welliver <hww3@riverweb.com>";
constant __version = "1.7";

//! an interface to the SQLite SQL Database Library (www.sqlite.org)
class SQLite {

inherit .___SQLite.SQLite;

void create(mixed ... args)
{

#ifdef __NT__
  ::create(args*"\\");
#else
  ::create(args*"/");
#endif

  }


object|int big_query(object|string q, mapping(string|int:mixed)|void bindings)
{
  if(!bindings)
    return ::big_query(q);
  else
    return ::big_query(Sql.sql_util.emulate_bindings(q, bindings, this));
}
 
array query(object|string q, mapping(string|int:mixed)|void bindings)
{
  if(!bindings)
    return ::query(q);
  else
    return ::query(Sql.sql_util.emulate_bindings(q, bindings, this));
}

array list_fields(string n, string|void wild)
{
  string qry = "";

  qry = "PRAGMA table_info(" + n + ")";

  array r = query(qry);

  // now, we weed out the ones that don't match wild, if provided
  if(wild)
  {
    r = filter(r, lambda(mapping row) 
              { return (search(row->name, wild) !=-1); }
          );
  }

  array fields = ({});

  foreach(r;; mapping f)
  {
    mapping fld = ([]);

    fld->name = f->name;
    fld->table = n;
  
    string t, l;   
 
    if(!sscanf(f->type, "%s(%s)", t, l))
      t = f->type;

    fld->length = (int)l;

    switch(t)
    {
      case "char":
       t = "string";
       break;

      case "int":
       t = "integer";
       break;
    }

    fld->type = t;

    fld->flags = (<>);

    if((int)f->notnull)
      fld->flags->not_null = 1;

    if((int)f->pk)
    {
      // primary key implies not null.
      fld->flags->not_null = 1;
      fld->flags->primary_key = 1;
    }

    fld->default = f->dflt_value;

    fields += ({fld});
  }

  return fields;
}

array list_tables(string|void n)
{
  string qry = "";

  if(n)
    qry = "SELECT name FROM SQLITE_MASTER WHERE name like '" + n + "%'";  
  else
    qry = "SELECT name FROM SQLITE_MASTER";  

  array r = query(qry);
  array out = ({});

  foreach(r;;mapping row)
    out += ({row->name});

  return out;
}

}

